# vim: set filetype=sh :

function dfremote() {
  dfremote_usage() { echo "Usage: dfremote [-y] [-m umask] -s <server> -u <user>"; }
  local playbookdir="${HOME}/projects/osx-bootstrapping"

  local OPTIND o s u y m
  while getopts ":s:u:m:y" o; do
    case "${o}" in
    s)
      s="${OPTARG}"
      ;;
    u)
      u="${OPTARG}"
      ;;
    y)
      y="yes"
      ;;
    m)
      m="${OPTARG}"
      ;;
    *)
      dfremote_usage
      return 1
      ;;
    esac
  done
  shift $((OPTIND-1))

  if [ -z "${s}" -o -z "${u}" ]; then
    dfremote_usage
    return 1
  fi

  local checkarg=""
  if [ -z "${y}" ]; then
    checkarg="--check"
    echo "-y not supplied - running in CHECK mode"
  fi

  local extravars="user=${u}"
  if [ -n "${m}" ]; then
    extravars="${extravars} umask=${m}"
  fi

  ANSIBLE_CONFIG=~/projects/osx-bootstrapping/ansible.cfg ansible-playbook ${checkarg} --ask-vault-pass -i ${s}, ${playbookdir}/dotfiles/servers.yml --extra-vars "${extravars}"
}

# Function wrapper around 'hub' for Github Enterprise
# Allows you to use hub(1) with your GitHub Enterprise account without setting
# it globally in your ~/.gitconfig.  Example: `ghe clone username/repo`
function ghe() {
  GITHUB_HOST={{ hub_host }} hub $*
}

# Setup an existing repo to use GitHub Enterprise exclusively
function ghe-setup() {
  git config hub.host {{ hub_host }}
  git config user.name "Marvin Pinto"
  git config user.email {{ hub_email }}
}
