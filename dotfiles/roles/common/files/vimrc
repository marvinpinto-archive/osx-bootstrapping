" Default vimrc file

" Don't need to be compatible with vi
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
" store lots of :cmdline history
set history=1000

" Show the (partial) command as it's being typed
set showcmd

" Show current mode down the bottom
set showmode

" Enable line numbers
set number

" Convert tabs to spaces
set expandtab

" Make tabs as wide as two spaces
set tabstop=2
set shiftwidth=2

" Auto indenting
set cindent
set smartindent
set autoindent

" Show 'invisible' characters
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅
set list

" Enable syntax highlighting
syntax on

" Disable error bells
set noerrorbells

" It seems that 'some' servers can't handle screen-256colors correctly and I'm
" tired of fighting :(
colorscheme distinguished

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed

" Change the color of the status line depending on mode
function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi statusline ctermfg=15 ctermbg=160
  elseif a:mode == 'r'
    hi statusline ctermfg=15 ctermbg=211
  else
    hi statusline ctermfg=15 ctermbg=154
  endif
endfunction
au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi statusline ctermfg=15 ctermbg=102

" Default status line
hi statusline ctermfg=15 ctermbg=102

" Format status line
set laststatus=2         " always show the status line
set statusline=\ [%n]    " buffer number
" set statusline+=\ %f     " relative path to the current file
set statusline+=\ %t     " tail of the file name
set statusline+=\ [%{strlen(&fenc)?&fenc:'none'},  " file encoding
set statusline+=%{&ff}]  " file format
set statusline+=\ %h     " help file flag
set statusline+=%m       " modified flag
set statusline+=%r       " read only flag
set statusline+=[%{empty(&filetype)?'none':&filetype}] " filetype or 'none'
set statusline+=%=       " left/right separator
set statusline+=(%l,     " row
set statusline+=%c\ %L)  " cursor column
set statusline+=\ %P     " percent through file

" Searching
set incsearch   " incremental search
set hlsearch    " highlight search items
set ignorecase  " case-insensitive searches
set smartcase   " ignore case if search pattern is all lowercase,
                " case-sensitive otherwise

" Clear the search highlights
nnoremap <F3> :set hlsearch!<CR>

" Remove access to the arrow keys
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

" Respect modeline in files
set modeline
set modelines=1

" Map the <leader> key to ,
let mapleader = ","

" Strip trailing whitespace (,ss)
function! StripWhitespace()
	let save_cursor = getpos(".")
	let old_query = getreg('/')
	:%s/\s\+$//e
	call setpos('.', save_cursor)
	call setreg('/', old_query)
endfunction
noremap <leader>ss :call StripWhitespace()<CR>

" Use <Leader>ml to append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" Re-hardwrap paragraphs of text
nnoremap <leader>q gqip

" Enable filetype plugins (nerdcommenter and syntax related)
filetype plugin on
filetype plugin indent on

" Map the <leader><tab> key to open the scratch buffer
nnoremap <leader><tab> :edit ~/.scratch<CR>

" Enable rainbow parentheses by default
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces
nnoremap <leader>R :RainbowParenthesesToggle<CR>

" Change the swap file directory
set swapfile
set dir=~/tmp

" Enable hidden buffers by default (doesn't bother you
" when switching back and forth)
set hidden

" Enhance command-line completion
set wildmenu

" Optimize for fast terminal connections
set ttyfast

" Add the g flag to search/replace by default
set gdefault

" Change mapleader
let mapleader=","

" Don't reset cursor to start of line when moving around.
set nostartofline

" Show the cursor position
set ruler

" Don't show the intro message when starting Vim
set shortmess=atI

" Show the filename in the window titlebar
set title

" Start scrolling three lines before the horizontal window border
set scrolloff=3

" Automatic commands
if has("autocmd")
	" Enable file type detection
	filetype on
	" Treat .json files as .js
	autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript
endif

